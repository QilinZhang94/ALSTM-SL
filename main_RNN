# -*- coding: utf-8 -*-
"""
Created on Mon Nov 22 10:50:26 2021

@author: Qilin Zhang
train and test RNN related models
"""

import numpy as np
import csv
import torch

from processing_construction import ProcessCons
from processing_traffic import ProcessTraffic
from processing_iri import ProcessIRI
from feature_fusion import Trans, ClimateFusion, OutFusion
from spliting_data import SplitData
from train_test import TandT
from sklearn.metrics import r2_score

# Construction
out_cons = ProcessCons()

# Climate
out_climate = ClimateFusion()

# Traffic
out_trf = ProcessTraffic('TRF_TREND')

# IRI
out_iri = ProcessIRI('MON_HSS_PROFILE_SECTION')

# reading the matching table
trans = Trans()

# matching out_iri , out_trf and out_climate
out_final = OutFusion(out_iri, out_trf, out_climate, trans, out_cons)

# spliting data
history_len = 7
prediction_len = 5
train_his, train_pre, test_his, test_pre = SplitData(out_final, history_len, prediction_len)

# training and testing, calculating RMSE, R2 (meanï¼Œstd)
times = 20 # repeating times
results = np.zeros((2,prediction_len,times))
r2 = []
if prediction_len > 1:
    for i in range(times):
        
        out, loss, out_pre, loss_pre, pre_y = TandT(train_his, train_pre, test_his, test_pre, history_len, prediction_len)
        
        
        for j in range(len(pre_y[0])):
            r2 = r2_score(pre_y.data.numpy()[:,j], out_pre.data.numpy()[:,j])
            #print('R2:{:.5f}'.format(r2))
            results[0,j,i] = (loss_pre[j].data**0.5)
            results[1,j,i] = r2
    for i in range(prediction_len):
        print('o'*40)    
        print('RMSE-mean:{:.3f}, RMSE-std: {:.3f}'.format(np.mean(results[0,i,:]), np.std(results[0,i,:])))
        print('R2-mean:{:.3f}, R2-std: {:.3f}'.format(np.mean(results[1,i,:]), np.std(results[1,i,:])))
        
else:
    for i in range(times):
        
        out, loss, out_pre, loss_pre, pre_y = TandT(train_his, train_pre, test_his, test_pre, history_len, prediction_len)
        r2 = r2_score(pre_y.data.numpy()[:,0], out_pre.data.numpy()[:,0])
        #print('R2:{:.5f}'.format(r2))
        results[0,0,i] = (loss_pre.data**0.5)
        results[1,0,i] = r2    
    print('o'*40)    
    print('RMSE-mean:{:.3f}, RMSE-std: {:.3f}'.format(np.mean(results[0,:,:]), np.std(results[0,:,:])))
    print('R2-mean:{:.3f}, R2-std: {:.3f}'.format(np.mean(results[1,:,:]), np.std(results[1,:,:])))
 
