# -*- coding: utf-8 -*-
"""
Created on Sat Nov 27 10:37:34 2021

@author: Qilin Zhang
the code used to train and test clustered data
"""

import numpy as np
import csv
from processing_construction import ProcessCons
from processing_traffic import ProcessTraffic
from processing_iri import ProcessIRI
from feature_fusion import Trans, ClimateFusion, OutFusion
from spliting_data import SplitData
from train_test import TandT
from sklearn.metrics import r2_score

# Construction
out_cons = ProcessCons()

# Climate
out_climate = ClimateFusion()

# Traffic
out_trf = ProcessTraffic('TRF_TREND')

# IRI
out_iri = ProcessIRI('MON_HSS_PROFILE_SECTION')

# reading matching table
trans = Trans()

# matching out_iri 与 out_trf 与 out_climate
out_final = OutFusion(out_iri, out_trf, out_climate, trans, out_cons)

# 
history_len = 7
prediction_len = 5
window_len = history_len + prediction_len 

out_final1 = [] # discard the data which length lowwer than window_len
for i in out_final:
    total_len = len(i)
    if total_len > window_len: # 
        out_final1.append(i)

# cluster label
label = [] 
with open('cluster_results.csv')as f:
    label1 = csv.reader(f)
    index = []
    for index in label1:
        label = index
index2 = []
for i in label:
    index2.append(int(i))

# spliting out_final accorading to label
num_cluster = 7
cluster1, cluster2, cluster3, cluster4, cluster5, cluster6, cluster7= [],[],[],[],[],[],[]
cluster = [cluster1, cluster2, cluster3, cluster4, cluster5, cluster6, cluster7]
for i in range(num_cluster):
    for index3,element in enumerate(index2):
        if element == i:
            cluster[i].append(out_final1[index3])

# training and testing

times = 20 
if prediction_len > 1:
    results_all = np.zeros((num_cluster,2,prediction_len,times)) 
    for c_num in range(num_cluster): 
        train_his, train_pre, test_his, test_pre = SplitData(cluster[c_num], history_len, prediction_len)
        print('#'*40) 
        print('Cluster %d' % (c_num + 1))
        
        results = np.zeros((2,prediction_len,times)) 
        r2 = []
        
        for i in range(times):
            
            out, loss, out_pre, loss_pre, pre_y = TandT(train_his, train_pre, test_his, test_pre, history_len, prediction_len)
            
            for j in range(len(pre_y[0])):
                r2 = r2_score(pre_y.data.numpy()[:,j], out_pre.data.numpy()[:,j])
                #print('R2:{:.5f}'.format(r2))
                results[0,j,i] = (loss_pre[j].data**0.5)
                results[1,j,i] = r2
        for i in range(prediction_len):
            print('RMSE-mean:{:.3f}, RMSE-std: {:.3f}'.format(np.mean(results[0,i,:]), np.std(results[0,i,:])))
            print('R2-mean:{:.3f}, R2-std: {:.3f}'.format(np.mean(results[1,i,:]), np.std(results[1,i,:])))
        results_all[c_num,:,:,:] = results  
    results_all = np.array(results_all)
    print('o'*40) 
    for i in range(prediction_len):
        print('RMSE-mean-all:{:.3f}, RMSE-std-all: {:.3f}'.format(np.mean(results_all[:,0,i,:]), np.std(results_all[:,0,i,:])))
        print('R2-mean-all:{:.3f}, R2-std-all: {:.3f}'.format(np.mean(results_all[:,1,i,:]), np.std(results_all[:,1,i,:])))
else:
    results_all = np.zeros((num_cluster,2,prediction_len,times)) 
    for c_num in range(num_cluster): 
        train_his, train_pre, test_his, test_pre = SplitData(cluster[c_num], history_len, prediction_len)
        print('#'*40) 
        print('Cluster %d' % (c_num + 1))
        
        results = np.zeros((2,prediction_len,times)) 
        r2 = []
        for i in range(times):
            out, loss, out_pre, loss_pre, pre_y = TandT(train_his, train_pre, test_his, test_pre, history_len, prediction_len)
            r2 = r2_score(pre_y.data.numpy()[:,0], out_pre.data.numpy()[:,0])
            #print('R2:{:.5f}'.format(r2))
            results[0,0,i] = (loss_pre.data**0.5)
            results[1,0,i] = r2       
        print('RMSE-mean:{:.3f}, RMSE-std: {:.3f}'.format(np.mean(results[0,:,:]), np.std(results[0,:,:])))
        print('R2-mean:{:.3f}, R2-std: {:.3f}'.format(np.mean(results[1,:,:]), np.std(results[1,:,:])))
        results_all[c_num,:,:,:] = results 
        results_all = np.array(results_all)
    print('o'*40)     
    print('RMSE-mean-all:{:.3f}, RMSE-std-all: {:.3f}'.format(np.mean(results_all[:,0,:,:]), np.std(results_all[:,0,:,:])))
    print('R2-mean-all:{:.3f}, R2-std-all: {:.3f}'.format(np.mean(results_all[:,1,:,:]), np.std(results_all[:,1,:,:])))
